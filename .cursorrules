## Git 커밋 메세지 작성 규칙

## 1. 기본 포맷

```
<type>(<scope>): <subject>

<body>

<footer>
```

## 2. 커밋 타입 (Type)

- feat: 새로운 기능 추가
- fix: 버그 수정
- docs: 문서 수정 (README, CHANGELOG 등)
- style: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
- refactor: 코드 리팩토링
- test: 테스트 코드, 리팩토링 테스트 코드 추가
- chore: 빌드 업무 수정, 패키지 매니저 수정
- design: CSS 등 사용자 UI 디자인 변경
- comment: 필요한 주석 추가 및 변경
- rename: 파일 혹은 폴더명을 수정하거나 옮기는 작업
- remove: 파일을 삭제하는 작업
- !breaking: 커다란 API 변경의 경우
- !hotfix: 급하게 치명적인 버그를 고치는 경우

## 3. 제목 작성 규칙 (Subject)

- 제목은 50자를 넘지 않아야 함
- 첫 글자는 대문자로 시작
- 마침표로 끝내지 않음
- 명령문으로 작성 (동사원형 사용)
- 과거형 사용하지 않음
- 제목과 본문은 한 줄 띄워 분리

## 4. 본문 작성 규칙 (Body)

- 각 줄은 72자를 넘지 않도록 함
- ���떻게 변경했는지보다 무엇을 변경했는지와 이유를 설명
- 여러 줄의 메시지를 작성할 땐 "-"로 구분

## 5. 꼬리말 규칙 (Footer)

- 필수가 아닌 옵션
- 이슈 트래커 ID를 참조할 때 사용
- "유형: #이슈번호" 형식으로 사용
- 여러 개의 이슈 번호를 적을 때는 쉼표로 구분

## 6. 커밋 메시지 예시

feat(login): 소셜 로그인 기능 추가

- 구글 로그인 연동
- 카카오 로그인 연동
- 로그인 후 JWT 토큰 저장 로직 구현

Resolves: #123
See also: #456, #789
```

## 7. 주의사항

- 하나의 커밋에는 하나의 작업만 포함
- 테스트가 필요한 코드는 반드시 테스트 코드 포함
- 커밋 메시지만 보고도 변경 사항을 파악할 수 있도록 작성

이 규칙은 다음과 같은 장점이 있습니다:

1. 커밋 히스토리 추적이 용이
2. 자동화된 CHANGELOG 생성 가능
3. 팀원간 코드 리뷰 효율성 증가
4. 프로젝트의 일관성 있는 히스토리 관리 가능

기존 파일에서 다음 사항들을 개선했습니다:
- 더 상세한 커밋 타입 추가
- 꼬리말(Footer) 섹션 추가
- 구체적인 예시 추가
- 각 섹션별 상세 규칙 추가
- 마크다운 포맷팅 개선


